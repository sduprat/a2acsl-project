--Called Operation Contract
context actions::action1()
--Modifies :size_doActions_action1_context
post:
  (doActions_action1_context->at(size_doActions_action1_context@pre)).result = result and
  size_doActions_action1_context = size_doActions_action1_context@pre + 1

--Called Operation Contract
context actions::action2(x:Integer,y:Integer,z_in:Integer,z_out:Integer)
--Modifies :y, z_out, size_doActions_action2_context, (doActions_action2_context->at(size_doActions_action2_context))._in
post:
  (doActions_action2_context->at(size_doActions_action2_context@pre))._in.x = x and
  (doActions_action2_context->at(size_doActions_action2_context@pre))._in.z_in = z_in and
  (doActions_action2_context->at(size_doActions_action2_context@pre))._out.y = y and
  (doActions_action2_context->at(size_doActions_action2_context@pre))._out.z_out = z_out and
  size_doActions_action2_context = size_doActions_action2_context@pre + 1

--Called Operation Contract
context actions::action3(x:Integer)
--Modifies :size_doActions_action3_context, (doActions_action3_context->at(size_doActions_action3_context))._in
post:
  (doActions_action3_context->at(size_doActions_action3_context@pre))._in.x = x and
  (doActions_action3_context->at(size_doActions_action3_context@pre)).result = result and
  size_doActions_action3_context = size_doActions_action3_context@pre + 1

--Called Operation Contract
context module::init()
--Modifies :size_doActions_init_context
post:
  size_doActions_init_context = size_doActions_init_context@pre + 1

--Behavior :B0
context module::doActions(action:N_Action,it:Integer)
pre:
  action = module::N_Action::A1 implies
(
  size_doActions_action1_context = 0
)
post:
  action = module::N_Action::A1 implies
(
  result = doActions_action1_context->at(0).result and
  let state_1_B0 : module::State = ocl_set(state@pre, 'id', state@pre.id + 1).oclAsType(module::State) in state = state_1_B0
)

--Behavior :B1
context module::doActions(action:N_Action,it:Integer)
pre:
  action = module::N_Action::A2 and
  let y_1_B1 : Integer = doActions_action2_context->at(0)._out.y in y_1_B1 = 0 implies
(
  size_doActions_action2_context = 0
)
post:
  action = module::N_Action::A2 and
  let y_1_B1 : Integer = doActions_action2_context->at(0)._out.y in y_1_B1 = 0 implies
(
  (doActions_action2_context->at(0))._in.z_in = 0 and
  (doActions_action2_context->at(0))._in.x = it and
  let z_1_B1 : Integer = doActions_action2_context->at(0)._out.z_out in let states_1_B1 : Sequence( module::State ) = states@pre->insertAt(z_1_B1, ocl_set(states@pre->at(z_1_B1), 'id', 0).oclAsType(module::State)) -> collect(temp1 | temp1.oclAsType(module::State)) in result = states_1_B1->at(0).id and
  let z_1_B1 : Integer = doActions_action2_context->at(0)._out.z_out in let states_1_B1 : Sequence( module::State ) = states@pre->insertAt(z_1_B1, ocl_set(states@pre->at(z_1_B1), 'id', 0).oclAsType(module::State)) -> collect(temp1 | temp1.oclAsType(module::State)) in states = states_1_B1
)

--Behavior :B2
context module::doActions(action:N_Action,it:Integer)
pre:
  action = module::N_Action::A2 and
  let y_1_B2 : Integer = doActions_action2_context->at(0)._out.y in y_1_B2 <> 0 implies
(
  size_doActions_action2_context = 0
)
post:
  action = module::N_Action::A2 and
  let y_1_B2 : Integer = doActions_action2_context->at(0)._out.y in y_1_B2 <> 0 implies
(
  (doActions_action2_context->at(0))._in.z_in = 0 and
  (doActions_action2_context->at(0))._in.x = it and
  let y_1_B2 : Integer = doActions_action2_context->at(0)._out.y in let z_1_B2 : Integer = doActions_action2_context->at(0)._out.z_out in let states_1_B2 : Sequence( module::State ) = states@pre->insertAt(y_1_B2, ocl_set(states@pre->at(y_1_B2), 'id', z_1_B2).oclAsType(module::State)) -> collect(temp1 | temp1.oclAsType(module::State)) in result = states_1_B2->at(0).id and
  let y_1_B2 : Integer = doActions_action2_context->at(0)._out.y in let z_1_B2 : Integer = doActions_action2_context->at(0)._out.z_out in let states_1_B2 : Sequence( module::State ) = states@pre->insertAt(y_1_B2, ocl_set(states@pre->at(y_1_B2), 'id', z_1_B2).oclAsType(module::State)) -> collect(temp1 | temp1.oclAsType(module::State)) in states = states_1_B2
)

--Behavior :B3
context module::doActions(action:N_Action,it:Integer)
pre:
  actions::status = 0 and (action = module::N_Action::A3) implies
(
  size_doActions_action3_context = 0
)
post:
  actions::status = 0 and (action = module::N_Action::A3) implies
(
  (doActions_action3_context->at(0))._in.x = 0 and
  (doActions_action3_context->at(1))._in.x = doActions_action3_context->at(0).result and
  (doActions_action3_context->at(2))._in.x = doActions_action3_context->at(1).result and
  result = doActions_action3_context->at(2).result
)

--Behavior :B4
context module::doActions(action:N_Action,it:Integer)
pre:
  actions::status <> 0 and (action = module::N_Action::A3) implies
(
  size_doActions_init_context = 0 and
  size_doActions_action1_context = 0
)
post:
  actions::status <> 0 and (action = module::N_Action::A3) implies
(
  result = doActions_action1_context->at(0).result
)


